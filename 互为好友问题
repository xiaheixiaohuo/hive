如果 friends_id 是一个包含多个好友ID的列表（用逗号分隔），我们需要将这些好友ID列表拆分成单个好友ID。可以使用 Hive 的 explode 函数来实现这一点。下面是具体的 SQL 查询步骤和代码：

步骤：
创建用户好友表：首先创建一个表来存储用户及其好友列表。
拆分好友列表：使用 explode 函数将好友列表拆分成单个好友ID。
创建反向关系：找到每对用户和他们的好友。
找出互为好友的用户对：检查每对用户是否互为好友。

CREATE TABLE user_table (
    user_id BIGINT,
    friends_id STRING
);

-- 插入示例数据
INSERT INTO user_table VALUES
(1, '2,3'),
(2, '1,3'),
(3, '1,2'),
(4, '5'),
(5, '4');

-- 拆分好友列表并查询互为好友的用户对
WITH exploded_friends AS (
    SELECT 
        user_id,
        friend_id
    FROM 
        user_table
    LATERAL VIEW explode(split(friends_id, ',')) exploded_table AS friend_id
),
reciprocal_friends AS (
    SELECT 
        a.user_id AS user1,
        a.friend_id AS user2
    FROM 
        exploded_friends a
    JOIN 
        exploded_friends b
    ON 
        a.user_id = b.friend_id
    AND 
        a.friend_id = b.user_id
)
SELECT 
    COUNT(DISTINCT user1, user2) / 2 AS mutual_friend_pairs
FROM 
    reciprocal_friends;

    创建用户好友表：首先创建一个表来存储用户及其好友列表。
拆分好友列表：使用 explode 函数将好友列表拆分成单个好友ID。
创建标记：为每个用户和其好友对创建一个标记。
找出互为好友的用户对：通过 group by 和 having 过滤出互为好友的用户对。
-- 创建用户好友表
CREATE TABLE user_table (
    user_id BIGINT,
    friends_id STRING
);

-- 插入示例数据
INSERT INTO user_table VALUES
(1, '2,3'),
(2, '1,3'),
(3, '1,2'),
(4, '5'),
(5, '4');

-- 拆分好友列表并查询互为好友的用户对
WITH exploded_friends AS (
    SELECT 
        user_id,
        friend_id
    FROM 
        user_table
    LATERAL VIEW explode(split(friends_id, ',')) exploded_table AS friend_id
),
tagged_friends AS (
    SELECT
        user_id,
        friend_id,
        CONCAT_WS('_', LEAST(user_id, friend_id), GREATEST(user_id, friend_id)) AS friends_tag
    FROM
        exploded_friends
),
mutual_friends AS (
    SELECT
        friends_tag,
        COUNT(DISTINCT user_id) AS cnt
    FROM
        tagged_friends
    GROUP BY
        friends_tag
    HAVING
        cnt = 2
)
SELECT 
    COUNT(*) AS mutual_friend_pairs
FROM 
    mutual_friends;
